package rocks.spaghetti.headlessmc.client.swing.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.function.Consumer;

@SuppressWarnings({"java:S1171", "java:S100"})
public class ClientMainWindow {
    private JPanel root;
    private JTabbedPane tabbedPane1;
    private JTextPane consoleMessagePane;
    private JTextField consoleInputField;
    private JButton consoleSubmitButton;
    private JScrollPane consoleScrollPane;

    private JFrame mainFrame;
    private int consoleScrollMax;
    private Consumer<String> consoleInputCallback = null;

    public ClientMainWindow() {
        mainFrame = new JFrame("ClientMainWindow");
        mainFrame.setContentPane(root);
        mainFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ActionListener submitCommand = (e -> {
            String text = consoleInputField.getText();
            if (!text.isEmpty()) {
                consoleInputField.setText("");
                consolePrintln("> " + text, null);

                if (consoleInputCallback != null) {
                    consoleInputCallback.accept(text);
                }
            }
        });
        consoleSubmitButton.addActionListener(submitCommand);
        consoleInputField.addActionListener(submitCommand);

        consoleScrollMax = consoleScrollPane.getVerticalScrollBar().getMaximum();
        consoleScrollPane.getVerticalScrollBar().addAdjustmentListener(e -> {
            if (consoleScrollMax < e.getAdjustable().getMaximum()) {
                e.getAdjustable().setValue(e.getAdjustable().getMaximum());
                consoleScrollMax = e.getAdjustable().getMaximum();
            }
        });

        mainFrame.pack();
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setVisible(true);
    }

    public void consolePrintln(String message, Color color) {
        consoleAppend(message + "\n", color);
    }

    public void consoleAppend(String message, Color foregroundColor) {
        StyleContext style = StyleContext.getDefaultStyleContext();
        AttributeSet attrs = SimpleAttributeSet.EMPTY;

        if (foregroundColor != null) {
            attrs = style.addAttribute(attrs, StyleConstants.Foreground, foregroundColor);
        }

        int len = consoleMessagePane.getDocument().getLength();
        consoleMessagePane.setCaretPosition(len);
        consoleMessagePane.setCharacterAttributes(attrs, false);
        consoleMessagePane.replaceSelection(message);
    }

    public void onConsoleInput(Consumer<String> callback) {
        consoleInputCallback = callback;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(1, 1, new Insets(4, 4, 4, 4), -1, -1));
        tabbedPane1 = new JTabbedPane();
        root.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Console", panel1);
        consoleScrollPane = new JScrollPane();
        panel1.add(consoleScrollPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        consoleMessagePane = new JTextPane();
        consoleScrollPane.setViewportView(consoleMessagePane);
        consoleInputField = new JTextField();
        panel1.add(consoleInputField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        consoleSubmitButton = new JButton();
        consoleSubmitButton.setText("Submit");
        panel1.add(consoleSubmitButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
